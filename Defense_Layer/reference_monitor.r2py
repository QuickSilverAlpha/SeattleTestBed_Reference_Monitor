"""
This security layer inadequately handles LeftPad writeat()s that strictly append



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class LPFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    
    # global locks
    self.read_write_lock = createlock()

    # Handling file open

    self.read_write_lock.acquire(True)
    try:
      self.LPfile = openfile(filename,create)
    except:
      raise
    finally:
      # Releasing lock
      self.read_write_lock.release()
    self.length = len(self.readat(None, 0))

  def readat(self, bytes, offset):
    # Read from the file using the sandbox's readat...
    # Acquire lock before read computations
    self.read_write_lock.acquire(True)
    try: 
      return self.LPfile.readat(bytes, offset)

    except:
      raise

    finally:
      # Releasing lock
      self.read_write_lock.release()

  def writeat(self,data,offset):

    # Acquire lock before write computations
    self.read_write_lock.acquire(True)
    rep_arg_flag = False

    if int(data.count("\n")) > 1:
      rep_arg_flag = True

    # raise RepyArgumentError for strictly append
    if self.length == offset and rep_arg_flag:
      # Releasing lock before raising the exception
      self.read_write_lock.release()
      raise RepyArgumentError
    
    try:

      # Scenario for strictly append writeat
      if self.length == offset: 

        # Case where there is a \n in the data
        if "\n" in data:
          loc = data.find('\n')
          self.LPfile.writeat(data[:loc+1]+"    "+ data[loc+1:], offset)
          self.length += len(data) + 4

        else:
          self.LPfile.writeat(data, offset)
          self.length += len(data)

      else:
        self.LPfile.writeat(data, offset)
        self.length = max(self.length, offset + len(data))
    
    except:
      raise
    finally:
      # Releasing lock
      self.read_write_lock.release()

  def close(self):
    # Acquire lock before file close
    self.read_write_lock.acquire(True)
    try:
      self.LPfile.close()

    except:
      raise

    finally:
      # Releasing lock
      self.read_write_lock.release()


def LPopenfile(filename, create):
  return LPFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":LPFile,
                "name":"LPFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":LPFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":LPFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":LPFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:LPopenfile}

# Execute the user code
secure_dispatch_module()
